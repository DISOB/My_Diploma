import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from src.utils import COLORS

def show_error_analysis(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Ä–∞–∑—É –≤ –Ω–∞—á–∞–ª–µ
    error_df = df[df['satisfaction'] == 0]
    
    col_back, col_title = st.columns([1, 4])
    with col_back:
        if st.button("‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é"):
            st.session_state.page = 'main'
            st.rerun()
    
    with col_title:
        st.title("‚ùå –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_errors = len(error_df)
    total_requests = len(df)
    error_rate = (total_errors / total_requests * 100) if total_requests > 0 else 0
    
    st.markdown(f"""
        ### üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã—Ö–æ–¥–æ–≤
        - –í—Å–µ–≥–æ –æ—à–∏–±–æ—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤: **{total_errors:,}**
        - –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤: **{error_rate:.1f}%**
        - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: **{total_requests:,}**
    """)
    
    tab1, tab2, tab3 = st.tabs([
        "üìä –≤—ã—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", 
        "üìà –¢–∏–ø—ã –≤—ã—Ö–æ–¥–æ–≤",
        "üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    ])
    
    with tab1:
        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_errors = error_df.groupby('category').agg({
            'satisfaction': 'count',
        }).reset_index()
        category_errors.columns = ['category', 'error_count']
        category_errors['error_rate'] = category_errors['error_count'] / category_errors['error_count'].sum() * 100
        
        fig_category_errors = px.bar(
            category_errors.sort_values('error_count', ascending=True),
            y='category',
            x='error_count',
            orientation='h',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
            labels={
                'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                'error_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤',
            },
            text=category_errors['error_rate'].round(1).astype(str) + '%'
        )
        fig_category_errors.update_traces(
            textposition='auto',
            marker_color=COLORS['incorrect_answer']
        )
        st.plotly_chart(fig_category_errors, use_container_width=True)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —É—á–µ–±–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        study_errors = error_df[error_df['category'] == '–£—á–µ–±–∞']
        if not study_errors.empty:
            subcategory_errors = study_errors.groupby('subcategory').agg({
                'satisfaction': 'count'
            }).reset_index()
            subcategory_errors.columns = ['subcategory', 'error_count']
            subcategory_errors['error_rate'] = subcategory_errors['error_count'] / subcategory_errors['error_count'].sum() * 100
            
            fig_subcategory_errors = px.bar(
                subcategory_errors.sort_values('error_count', ascending=True),
                y='subcategory',
                x='error_count',
                orientation='h',
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —É—á–µ–±–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
                labels={
                    'subcategory': '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                    'error_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤'
                },
                text=subcategory_errors['error_rate'].round(1).astype(str) + '%'
            )
            fig_subcategory_errors.update_traces(
                textposition='auto',
                marker_color=COLORS['incorrect_answer']
            )
            st.plotly_chart(fig_subcategory_errors, use_container_width=True)
    
    with tab2:
        
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
        def categorize_error(response):
            response = response.lower()
            if '—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç' in response:
                return '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'
            elif '–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤—à—ç' in response:
                return '–í–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –í–®–≠'
            elif '–Ω–µ—É–º–µ—Å—Ç–Ω–æ' in response:
                return '–ù–µ—É–º–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å'
            else:
                return '–î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏'
        
        error_df['error_type'] = error_df['response'].apply(categorize_error)
        error_types = error_df.groupby('error_type').size().reset_index(name='count')
        error_types['percentage'] = (error_types['count'] / len(error_df) * 100).round(1)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        error_type_order = [
            '–í–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –í–®–≠',
            '–ù–µ—É–º–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å',
            '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç',
            '–î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏'
        ]
        error_types['error_type'] = pd.Categorical(
            error_types['error_type'], 
            categories=error_type_order, 
            ordered=True
        )
        error_types = error_types.sort_values('error_type')
        
        fig_error_types = px.pie(
            error_types,
            values='count',
            names='error_type',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤',
            color_discrete_sequence=[
                '#FF6B6B',  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –ø–æ —Ç–µ–º–µ
                '#FFB366',  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –Ω–µ—É–º–µ—Å—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                '#FF99CC',  # –†–æ–∑–æ–≤—ã–π –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫
                '#B8B8B8'   # –°–µ—Ä—ã–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            ],
            hover_data=['percentage']
        )
        
        fig_error_types.update_traces(
            textinfo='percent',
            textposition='inside'
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∏–∞–≥—Ä–∞–º–º—ã
        fig_error_types.update_layout(
            height=600,
            showlegend=True,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            )
        )
        
        st.plotly_chart(fig_error_types, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        st.write("### –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤")
        error_details = pd.DataFrame({
            '–¢–∏–ø –æ—à–∏–±–∫–∏': error_types['error_type'],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': error_types['count'],
            '–ü—Ä–æ—Ü–µ–Ω—Ç': error_types['percentage'].map('{:.1f}%'.format)
        })
        
        col1, col2 = st.columns([3, 1])
        with col1:
            st.dataframe(error_details, hide_index=True)
        with col2:
            st.download_button(
                "üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
                error_details.to_csv(index=False).encode('utf-8-sig'),
                "error_types_analysis.csv",
                "text/csv",
                key='download-csv-errors'
            )
    
    with tab3:
        
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏ –∏—Ö —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        columns_to_show = {
            'date': '–î–∞—Ç–∞',
            'question_time': '–í—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–∞',
            'answer_time': '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞',
            'name': '–ò–º—è',
            'campus': '–ö–∞–º–ø—É—Å',
            'education_level': '–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
            'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            'subcategory': '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'query': '–ó–∞–ø—Ä–æ—Å',
            'response': '–û—Ç–≤–µ—Ç',
            'satisfaction': '–°—Ç–∞—Ç—É—Å'
        }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        error_df = df[df['satisfaction'] == 0]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        display_df = (error_df[columns_to_show.keys()]
                     .sort_values(['date', 'question_time'], ascending=[False, False])
                     .rename(columns=columns_to_show)
                     .copy())
        
        # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ —Å—Ç–∞—Ç—É—Å–∞
        display_df['–°—Ç–∞—Ç—É—Å'] = display_df['–°—Ç–∞—Ç—É—Å'].map({
            1: '‚úÖ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ',
            0: '‚ùå –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'
        })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            display_df.reset_index(drop=True),
            hide_index=True
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
            display_df.to_csv(index=False).encode('utf-8-sig'),
            "error_analysis.csv",
            "text/csv",
            key='download-csv'
        )