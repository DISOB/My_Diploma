import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from src.utils import COLORS
import pandas as pd

def show_developer_view(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    tab1, tab2, tab3 = st.tabs(["üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", "üìà –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑", "üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"])
    
    with tab1:
        show_category_analysis(df)
    
    with tab2:
        show_time_analysis(df)
    
    with tab3:
        show_detailed_data(df)

def show_category_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = df.groupby('category', as_index=False).agg({
        'satisfaction': ['count', lambda x: (x == 1).mean() * 100]
    })
    category_stats.columns = ['category', 'count', 'success_rate']
    
    fig_categories = px.bar(
        category_stats,
        x='category',
        y='count',
        color='success_rate',
        title='–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
        labels={
            'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
            'success_rate': '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)'
        },
        color_continuous_scale=['red', 'yellow', 'green']
    )
    st.plotly_chart(fig_categories, use_container_width=True)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—á–µ–±–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    study_df = df[df['category'] == '–£—á–µ–±–∞']
    if not study_df.empty:
        subcategory_stats = study_df.groupby('subcategory', as_index=False).agg({
            'satisfaction': ['count', lambda x: (x == 1).mean() * 100]
        })
        subcategory_stats.columns = ['subcategory', 'count', 'success_rate']
        
        fig_subcategories = px.bar(
            subcategory_stats,
            x='subcategory',
            y='count',
            color='success_rate',
            title='–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—á–µ–±–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
            labels={
                'subcategory': '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
                'success_rate': '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)'
            },
            color_continuous_scale=['red', 'yellow', 'green']
        )
        fig_subcategories.update_layout(
            xaxis_tickangle=-45,
            height=600
        )
        st.plotly_chart(fig_subcategories, use_container_width=True)

def show_time_analysis(df):
    """–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑"""
    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º —Å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é
    df['hour'] = df['timestamp'].dt.hour
    hourly_stats = df.groupby('hour', as_index=False).agg({
        'satisfaction': ['count', lambda x: (x == 1).mean() * 100]
    })
    hourly_stats.columns = ['hour', 'total_requests', 'success_rate']
    
    fig_hourly = go.Figure()
    fig_hourly.add_trace(go.Bar(
        x=hourly_stats['hour'],
        y=hourly_stats['total_requests'],
        name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
        marker_color='lightblue'
    ))
    fig_hourly.add_trace(go.Scatter(
        x=hourly_stats['hour'],
        y=hourly_stats['success_rate'],
        name='–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)',
        yaxis='y2',
        line=dict(color='green', width=2)
    ))
    
    fig_hourly.update_layout(
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º',
        xaxis_title='–ß–∞—Å',
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
        yaxis2=dict(
            title='–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)',
            overlaying='y',
            side='right',
            range=[0, 100]
        ),
        hovermode='x unified'
    )
    st.plotly_chart(fig_hourly, use_container_width=True)
    
    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    df['date'] = df['timestamp'].dt.date
    daily_hourly = df.groupby(['date', 'hour']).size().reset_index(name='count')
    fig_heatmap = px.density_heatmap(
        daily_hourly,
        x='hour',
        y='date',
        z='count',
        title='–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        labels={'hour': '–ß–∞—Å', 'date': '–î–∞—Ç–∞', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤'}
    )
    st.plotly_chart(fig_heatmap, use_container_width=True)

def show_detailed_data(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    st.write("### üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    satisfaction_filter = st.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏",
        ['–í—Å–µ', '–£—Å–ø–µ—à–Ω—ã–µ', '–ù–µ—É—Å–ø–µ—à–Ω—ã–µ']
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    if satisfaction_filter == '–£—Å–ø–µ—à–Ω—ã–µ':
        filtered_df = df[df['satisfaction'] == 1]
    elif satisfaction_filter == '–ù–µ—É—Å–ø–µ—à–Ω—ã–µ':
        filtered_df = df[df['satisfaction'] == 0]
    else:
        filtered_df = df
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    columns_to_show = ['timestamp', 'category', 'subcategory', 'query', 'response', 'satisfaction']
    st.dataframe(
        filtered_df[columns_to_show].sort_values('timestamp', ascending=False).reset_index(drop=True),
        hide_index=True
    )
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    st.download_button(
        "üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
        filtered_df[columns_to_show].to_csv(index=False).encode('utf-8'),
        "chat_analysis.csv",
        "text/csv",
        key='download-csv'
    )
