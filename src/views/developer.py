import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from src.utils import COLORS

def show_developer_view(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    tab1, tab2, tab3 = st.tabs(["üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤", "üìà –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑", "üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"])
    
    with tab1:
        _show_categories_tab(df)
    
    with tab2:
        _show_time_analysis_tab(df)
    
    with tab3:
        _show_text_analysis_tab(df)
    
    # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    st.divider()
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(df)
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    st.download_button(
        "üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
        df.to_csv(index=False).encode('utf-8'),
        "log_analysis.csv",
        "text/csv",
        key='download-csv-dev'
    )

def _show_categories_tab(df):
    """–í–∫–ª–∞–¥–∫–∞ —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    category_counts = df['error_category'].value_counts()
    fig_categories = px.pie(
        values=category_counts.values,
        names=category_counts.index,
        title='–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
        color=category_counts.index,
        color_discrete_map=COLORS
    )
    fig_categories.update_traces(
        textposition='inside',
        textinfo='percent+label',
        hovertemplate="<br>".join([
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %{label}",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}",
            "–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}"
        ])
    )
    st.plotly_chart(fig_categories, use_container_width=True)

def _show_time_analysis_tab(df):
    """–í–∫–ª–∞–¥–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    st.subheader("üìà –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    df['hour'] = df['timestamp'].dt.hour
    df['date'] = df['timestamp'].dt.date
    
    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
    hourly_stats = df.groupby('hour').agg({
        'satisfaction': ['count', 'mean']
    }).reset_index()
    hourly_stats.columns = ['hour', 'total_requests', 'success_rate']
    
    _show_hourly_activity(hourly_stats)
    _show_error_heatmap(df)
    _show_time_stats(hourly_stats)

def _show_hourly_activity(hourly_stats):
    """–ì—Ä–∞—Ñ–∏–∫ –ø–æ—á–∞—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    fig_hourly = go.Figure()
    fig_hourly.add_trace(go.Bar(
        x=hourly_stats['hour'],
        y=hourly_stats['total_requests'],
        name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
        marker_color='#636EFA'
    ))
    fig_hourly.add_trace(go.Scatter(
        x=hourly_stats['hour'],
        y=hourly_stats['success_rate'],
        name='–£—Å–ø–µ—à–Ω–æ—Å—Ç—å',
        yaxis='y2',
        line=dict(color='#00CC96', width=3)
    ))
    
    fig_hourly.update_layout(
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º',
        xaxis_title='–ß–∞—Å',
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
        yaxis2=dict(
            title='–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏',
            overlaying='y',
            side='right',
            range=[0, 1]
        ),
        hovermode='x unified'
    )
    st.plotly_chart(fig_hourly, use_container_width=True)

def _show_error_heatmap(df):
    """–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –æ—à–∏–±–æ–∫"""
    col1, col2 = st.columns([2, 1])
    with col1:
        errors_by_time = df[df['satisfaction'] == 0].groupby(['date', 'hour']).size().reset_index()
        errors_by_time.columns = ['date', 'hour', 'count']
        
        fig_heatmap = px.density_heatmap(
            errors_by_time,
            x='hour',
            y='date',
            z='count',
            title='–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –æ—à–∏–±–æ–∫',
            labels={'hour': '–ß–∞—Å', 'date': '–î–∞—Ç–∞', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫'},
            color_continuous_scale='Viridis'
        )
        fig_heatmap.update_layout(
            xaxis_title='–ß–∞—Å –¥–Ω—è',
            yaxis_title='–î–∞—Ç–∞'
        )
        st.plotly_chart(fig_heatmap, use_container_width=True)

def _show_time_stats(hourly_stats):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    with st.container():
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º")
        peak_hour = hourly_stats.loc[hourly_stats['total_requests'].idxmax()]
        best_hour = hourly_stats.loc[hourly_stats['success_rate'].idxmax()]
        st.markdown(f"""
            #### –ü–∏–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            üïê **–ß–∞—Å:** {int(peak_hour['hour']):02d}:00
            üìä **–ó–∞–ø—Ä–æ—Å–æ–≤:** {int(peak_hour['total_requests'])}
            ‚úÖ **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {peak_hour['success_rate']:.1%}
            
            #### –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            üïê **–ß–∞—Å:** {int(best_hour['hour']):02d}:00
            üìä **–ó–∞–ø—Ä–æ—Å–æ–≤:** {int(best_hour['total_requests'])}
            ‚úÖ **–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {best_hour['success_rate']:.1%}
        """)

def _show_text_analysis_tab(df):
    """–í–∫–ª–∞–¥–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–µ–∫—Å—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NULL –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
    df['query'] = df['query'].fillna('')
    df['response'] = df['response'].fillna('')
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫
    df['query_length'] = df['query'].astype(str).str.len()
    df['response_length'] = df['response'].astype(str).str.len()
    
    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –¥–ª–∏–Ω—ã
    plot_df = df[
        (df['query_length'] > 0) & 
        (df['response_length'] > 0)
    ].copy()
    
    _show_text_metrics(plot_df)
    _show_length_analysis(plot_df, len(df))

def _show_text_metrics(plot_df):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞", f"{plot_df['query_length'].mean():.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        st.metric("–ú–µ–¥–∏–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞", f"{plot_df['query_length'].median():.0f} —Å–∏–º–≤–æ–ª–æ–≤")
    with col2:
        st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞", f"{plot_df['response_length'].mean():.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        st.metric("–ú–µ–¥–∏–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞", f"{plot_df['response_length'].median():.0f} —Å–∏–º–≤–æ–ª–æ–≤")

def _show_length_analysis(plot_df, total_records):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞"""
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    valid_records = len(plot_df)
    if total_records != valid_records:
        st.warning(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {total_records - valid_records} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞–º–∏")
    
    fig_lengths = px.scatter(
        plot_df,
        x='query_length',
        y='response_length',
        color='error_category',
        title='–ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤',
        labels={
            'query_length': '–î–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ (—Å–∏–º–≤–æ–ª–æ–≤)',
            'response_length': '–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (—Å–∏–º–≤–æ–ª–æ–≤)',
            'error_category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
        },
        color_discrete_map=COLORS
    )
    
    # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig_lengths.update_traces(
        marker=dict(size=8),
        opacity=0.7
    )
    fig_lengths.update_layout(
        xaxis=dict(
            title_font=dict(size=14),
            tickfont=dict(size=12),
            showgrid=True
        ),
        yaxis=dict(
            title_font=dict(size=14),
            tickfont=dict(size=12),
            showgrid=True
        ),
        showlegend=True,
        legend=dict(
            title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
            font=dict(size=12)
        )
    )
    
    st.plotly_chart(fig_lengths, use_container_width=True)
