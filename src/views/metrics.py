import streamlit as st

def show_metrics(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    col1, col2, col3 = st.columns(3)
    with col1:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–µ—Ä–≤—ã–º 
        """
        if len(df) > 0:
            period = f"{df['timestamp'].min().strftime('%H:%M')} - {df['timestamp'].max().strftime('%H:%M')}"
        else:
            period = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        st.metric("–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥", period)
        """
        st.metric("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", len(df))
        success_rate = (df['satisfaction'] == 1).mean() * 100 if len(df) > 0 else 0
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤", f"{success_rate:.1f}%")
    
    with col2:
        if len(df) > 0:
            total_errors = len(df[df['satisfaction'] == 0])
            error_rate = (total_errors / len(df) * 100)
            error_warning = " ‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫!" if error_rate > 30 else ""
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            incorrect_count = len(df[df['error_category'] == 'incorrect_answer'])
            incorrect_rate = (incorrect_count / total_errors * 100) if total_errors > 0 else 0
            incorrect_warning = " ‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!" if incorrect_rate > 30 else ""
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π
            hallucination_count = len(df[df['error_category'] == 'hallucination'])
            hallucination_rate = (hallucination_count / total_errors * 100) if total_errors > 0 else 0
            hallucination_warning = " ‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π!" if hallucination_rate > 30 else ""
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            if error_rate > 30:
                st.markdown(
                    f"""
                    <div style="background-color: rgba(255, 0, 0, 0.1); padding: 10px; border-radius: 5px; margin: 5px 0;">
                        <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫:</strong> {total_errors} ({error_rate:.1f}%){error_warning}
                    </div>
                    """,
                    unsafe_allow_html=True
                )
            else:
                st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫", 
                         f"{total_errors} ({error_rate:.1f}%)")
            
            if incorrect_rate > 30:
                st.markdown(
                    f"""
                    <div style="background-color: rgba(255, 0, 0, 0.1); padding: 10px; border-radius: 5px; margin: 5px 0;">
                        <strong>–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</strong> {incorrect_rate:.1f}% –æ—Ç –æ—à–∏–±–æ–∫{incorrect_warning}
                    </div>
                    """, 
                    unsafe_allow_html=True
                )
            else:
                st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", 
                         f"{incorrect_rate:.1f}% –æ—Ç –æ—à–∏–±–æ–∫")
            
            if hallucination_rate > 30:
                st.markdown(
                    f"""
                    <div style="background-color: rgba(255, 0, 0, 0.1); padding: 10px; border-radius: 5px; margin: 5px 0;">
                        <strong>–ü—Ä–æ—Ü–µ–Ω—Ç –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π:</strong> {hallucination_rate:.1f}% –æ—Ç –æ—à–∏–±–æ–∫{hallucination_warning}
                    </div>
                    """, 
                    unsafe_allow_html=True
                )
            else:
                st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π", 
                         f"{hallucination_rate:.1f}% –æ—Ç –æ—à–∏–±–æ–∫", 
                         delta=-hallucination_rate, 
                         delta_color="inverse")
        else:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω—É–ª–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫", "0 (0%)")
            st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤", "0% –æ—Ç –æ—à–∏–±–æ–∫")
            st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π", "0% –æ—Ç –æ—à–∏–±–æ–∫")

    with col3:
        if len(df) > 0:
            satisfied_count = len(df[df['satisfaction'] == 1])
            unsatisfied_count = len(df[df['satisfaction'] == 0])
        else:
            satisfied_count = 0
            unsatisfied_count = 0
        
        st.metric("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", f"{satisfied_count} (üëç)")
        st.metric("–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", f"{unsatisfied_count} (üëé)")
