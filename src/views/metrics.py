import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from src.views.standard import calculate_response_time

def show_metrics(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    # –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
    st.markdown("""
        <style>
        .dashboard {
            padding: 1rem;
        }
        .metric-container {
            background-color: #ffffff;
            border-radius: 12px;
            padding: 24px;
            box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;
            margin-bottom: 24px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }
        .metric-container:hover {
            transform: translateY(-2px);
            box-shadow: rgba(0, 0, 0, 0.15) 0px 8px 24px;
        }
        .metric-value {
            font-size: 32px;
            font-weight: 600;
            color: #1f1f1f;
            margin: 8px 0;
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
        }
        .metric-label {
            color: #666;
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 8px;
        }
        .metric-subtitle {
            font-size: 14px;
            color: #666;
            margin-top: 4px;
        }
        .trend-indicator {
            display: inline-flex;
            align-items: center;
            padding: 4px 12px;
            border-radius: 16px;
            font-size: 14px;
            font-weight: 500;
            margin-top: 12px;
        }
        .positive-trend {
            background-color: #ecfdf3;
            color: #027948;
        }
        .warning-trend {
            background-color: #fff7ed;
            color: #9a3412;
        }
        .negative-trend {
            background-color: #fef2f2;
            color: #dc2626;
        }
        .alerts-container {
            background-color: #ffffff;
            border-radius: 12px;
            padding: 20px;
            box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;
        }
        .alert-card {
            background-color: #fff7ed;
            border-left: 4px solid #fb923c;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            font-size: 14px;
        }
        .success-card {
            background-color: #ecfdf5;
            border-left: 4px solid #34d399;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            font-size: 14px;
        }
        .category-info {
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 20px;
            margin-top: 24px;
        }
        .stats-grid {
            display: grid;
            gap: 24px;
            margin-bottom: 24px;
        }
        </style>
    """, unsafe_allow_html=True)

    st.markdown("""
        <div class='dashboard'>
            <h1 style='text-align: center; margin-bottom: 32px; font-size: 2.5rem; font-weight: 600; color: #0f172a;'>
                üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            </h1>
        </div>
    """, unsafe_allow_html=True)

    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    if len(df) > 0:
        df = calculate_response_time(df)
        success_rate = (df['satisfaction'] == 1).mean() * 100
        avg_response_time = df['response_time'].mean()
        satisfied_count = len(df[df['satisfaction'] == 1])
        unsatisfied_count = len(df[df['satisfaction'] == 0])
        satisfaction_rate = satisfied_count / (satisfied_count + unsatisfied_count) if satisfied_count + unsatisfied_count > 0 else 0
        
        # –¢—Ä–µ–Ω–¥—ã –∏ —Å—Ç–∞—Ç—É—Å—ã
        success_status = "positive" if success_rate >= 90 else "warning" if success_rate >= 75 else "negative"
        response_status = "positive" if avg_response_time <= 2 else "warning" if avg_response_time <= 3 else "negative"
        satisfaction_status = "positive" if satisfaction_rate >= 0.9 else "warning" if satisfaction_rate >= 0.75 else "negative"
    else:
        success_rate = avg_response_time = satisfied_count = unsatisfied_count = satisfaction_rate = 0
        success_status = response_status = satisfaction_status = "negative"

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    metrics_col, alerts_col = st.columns([3, 1])

    with metrics_col:
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown(f"""
                <div class='metric-container'>
                    <div class='metric-label'>–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>
                    <div class='metric-value'>{success_rate:.1f}%</div>
                    <div class='metric-subtitle'>–≤—Å–µ–≥–æ {len(df):,} –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                    <div class='trend-indicator {success_status}-trend'>
                        {"‚ú® –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞" if success_status == "positive" else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è" if success_status == "warning" else "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å"}
                    </div>
                </div>
            """, unsafe_allow_html=True)
            if st.button("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", type="primary", use_container_width=True):
                st.session_state.page = 'categories'

        with col2:
            st.markdown(f"""
                <div class='metric-container'>
                    <div class='metric-label'>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞</div>
                    <div class='metric-value'>{avg_response_time:.1f}—Å</div>
                    <div class='metric-subtitle'>—Å–µ–∫—É–Ω–¥ –≤ —Å—Ä–µ–¥–Ω–µ–º</div>
                    <div class='trend-indicator {response_status}-trend'>
                        {"‚ö° –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫" if response_status == "positive" else "‚è≥ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å" if response_status == "warning" else "üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫"}
                    </div>
                </div>
            """, unsafe_allow_html=True)
            if st.button("‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏", type="primary", use_container_width=True):
                st.session_state.page = 'response_time'

        with col3:
            st.markdown(f"""
                <div class='metric-container'>
                    <div class='metric-label'>–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                    <div class='metric-value'>{satisfaction_rate * 100:.1f}%</div>
                    <div class='metric-subtitle'>üëç {satisfied_count} / üëé {unsatisfied_count}</div>
                    <div class='trend-indicator {satisfaction_status}-trend'>
                        {"üåü –í—ã—Å–æ–∫–∞—è" if satisfaction_status == "positive" else "üòê –°—Ä–µ–¥–Ω—è—è" if satisfaction_status == "warning" else "üòü –ù–∏–∑–∫–∞—è"}
                    </div>
                </div>
            """, unsafe_allow_html=True)
            if st.button("üìà –ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", type="primary", use_container_width=True):
                st.session_state.page = 'success_rate'

    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
    with alerts_col:
        st.markdown("""
            <div class='alerts-container'>
                <h3 style='margin-bottom: 16px; font-size: 18px; font-weight: 600; color: #0f172a;'>
                    üéØ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                </h3>
        """, unsafe_allow_html=True)
        
        if len(df) > 0:
            warnings = []
            if success_rate < 90:
                severity = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ " if success_rate < 75 else ""
                warnings.append(f"‚ùó {severity}–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ ({success_rate:.1f}%)")
            if avg_response_time > 2:
                severity = "–æ—á–µ–Ω—å " if avg_response_time > 3 else ""
                warnings.append(f"‚ö° {severity}–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ ({avg_response_time:.1f}—Å)")
            if satisfaction_rate < 0.9:
                severity = "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ " if satisfaction_rate < 0.75 else ""
                warnings.append(f"üòï {severity}–ù–∏–∑–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({satisfaction_rate*100:.1f}%)")

            if warnings:
                for warning in warnings:
                    st.markdown(f"<div class='alert-card'>{warning}</div>", unsafe_allow_html=True)
                
                st.markdown("""
                    <div style='margin-top: 16px; font-size: 14px; color: #64748b;'>
                        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                    </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown("""
                    <div class='success-card'>
                        ‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ
                    </div>
                    <div style='margin-top: 16px; font-size: 14px; color: #64748b;'>
                        –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
                    </div>
                """, unsafe_allow_html=True)
        
        st.markdown("</div>", unsafe_allow_html=True)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    st.markdown(f"""
        <div class='category-info'>
            <h3 style='margin-bottom: 24px; font-size: 1.5rem; font-weight: 600; color: #0f172a;'>
                üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            </h3>
        </div>
    """, unsafe_allow_html=True)

    if len(df) > 0:
        categories = df['category'].value_counts()
        main_category = categories.index[0] if not categories.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        category_count = categories.iloc[0] if not categories.empty else 0
        total_requests = len(df)
        category_percentage = (category_count / total_requests * 100) if total_requests > 0 else 0
        
        cat_col1, cat_col2 = st.columns([2, 1])
        
        with cat_col1:
            st.markdown(f"""
                <div class='metric-container' style='margin-bottom: 0;'>
                    <div class='metric-label'>–°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</div>
                    <div class='metric-value' style='font-size: 28px;'>{main_category}</div>
                    <div class='metric-subtitle' style='display: flex; justify-content: space-between;'>
                        <span>{category_count:,} –∑–∞–ø—Ä–æ—Å–æ–≤</span>
                        <span style='color: #0284c7;'>{category_percentage:.1f}% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞</span>
                    </div>
                </div>
            """, unsafe_allow_html=True)

            if st.button("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", use_container_width=True):
                st.session_state.page = 'categories'

        with cat_col2:
            if df['category'].eq('–£—á–µ–±–∞').any():
                study_df = df[df['category'] == '–£—á–µ–±–∞']
                study_stats = study_df['subcategory'].value_counts()
                top_subcategory = study_stats.index[0] if not study_stats.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                subcategory_count = study_stats.iloc[0] if not study_stats.empty else 0
                subcategory_percentage = (subcategory_count / len(study_df) * 100) if len(study_df) > 0 else 0
                
                st.markdown(f"""
                    <div class='metric-container' style='margin-bottom: 0;'>
                        <div class='metric-label'>–¢–æ–ø –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—á–µ–±—ã</div>
                        <div class='metric-value' style='font-size: 24px;'>{top_subcategory}</div>
                        <div class='metric-subtitle' style='display: flex; justify-content: space-between;'>
                            <span>{subcategory_count:,} –∑–∞–ø—Ä–æ—Å–æ–≤</span>
                            <span style='color: #0284c7;'>{subcategory_percentage:.1f}%</span>
                        </div>
                    </div>
                """, unsafe_allow_html=True)
