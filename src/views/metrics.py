import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from src.views.standard import calculate_response_time

def show_metrics(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–ª–∏–∫–∞"""
    st.write("### üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
    if len(df) > 0:
        df = calculate_response_time(df)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if len(df) > 0:
            period = f"{df['timestamp'].min().strftime('%d.%m.%Y')} - {df['timestamp'].max().strftime('%d.%m.%Y')}"
        else:
            period = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        st.metric("–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥", period)
        
        total_requests = len(df)
        success_rate = (df['satisfaction'] == 1).mean() * 100 if len(df) > 0 else 0
        
        col1_1, col1_2 = st.columns([2, 3])
        with col1_1:
            st.metric("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", total_requests)
        with col1_2:
            if st.button("üìä –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ ‚Üí", use_container_width=True):
                st.session_state.page = 'categories'
        
        col1_3, col1_4 = st.columns([2, 3])
        with col1_3:
            st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤", f"{success_rate:.1f}%")
        with col1_4:
            if st.button("üìà –ö –∞–Ω–∞–ª–∏–∑—É ‚Üí", use_container_width=True):
                st.session_state.page = 'success_rate'
    
    with col2:
        if len(df) > 0:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = df['category'].value_counts()
            main_category = categories.index[0] if not categories.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            category_count = categories.iloc[0] if not categories.empty else 0
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–£—á–µ–±–∞"
            study_df = df[df['category'] == '–£—á–µ–±–∞']
            if not study_df.empty:
                subcategories = study_df['subcategory'].value_counts()
                main_subcategory = subcategories.index[0] if not subcategories.empty else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                subcategory_count = subcategories.iloc[0] if not subcategories.empty else 0
            else:
                main_subcategory = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                subcategory_count = 0
            
            col2_1, col2_2 = st.columns([2, 3])
            with col2_1:
                st.metric("–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", f"{main_category} ({category_count})")
            with col2_2:
                if st.button("üîç –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Üí", use_container_width=True):
                    st.session_state.page = 'categories'
            
            col2_3, col2_4 = st.columns([2, 3])
            with col2_3:
                st.metric("–û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—á–µ–±—ã", f"{main_subcategory} ({subcategory_count})")
            with col2_4:
                if st.button("üìö –ö –∑–∞–ø—Ä–æ—Å–∞–º ‚Üí", use_container_width=True):
                    st.session_state.page = 'categories'
        else:
            st.metric("–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            st.metric("–û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É—á–µ–±—ã", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    with col3:
        if len(df) > 0:
            avg_response_time = df['response_time'].mean()
            
            col3_1, col3_2 = st.columns([2, 3])
            with col3_1:
                st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{avg_response_time:.1f} —Å–µ–∫")
            with col3_2:
                if st.button("‚è±Ô∏è –ö–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Üí", use_container_width=True):
                    st.session_state.page = 'response_time'
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            satisfied_count = len(df[df['satisfaction'] == 1])
            unsatisfied_count = len(df[df['satisfaction'] == 0])
            
            col3_3, col3_4 = st.columns([2, 3])
            with col3_3:
                st.metric("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–µ", f"{satisfied_count} (üëç)")
                st.metric("–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–µ", f"{unsatisfied_count} (üëé)")
            with col3_4:
                if st.button("üìä –ö –æ—Ü–µ–Ω–∫–∞–º ‚Üí", use_container_width=True):
                    st.session_state.page = 'success_rate'
        else:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            st.metric("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", "0")
            st.metric("–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã", "0")
