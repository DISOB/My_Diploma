import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from src.utils import COLORS
from datetime import datetime, timedelta

def calculate_response_time(df):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏"""
    def time_diff(row):
        q_time = row['question_time']
        a_time = row['answer_time']
        
        base_date = datetime.now().date()
        q_datetime = datetime.combine(base_date, q_time)
        a_datetime = datetime.combine(base_date, a_time)
        
        if a_datetime < q_datetime:
            a_datetime = a_datetime + timedelta(days=1)
            
        return (a_datetime - q_datetime).total_seconds()
    
    df['response_time'] = df.apply(time_diff, axis=1)
    return df

def show_standard_view(df, section='all'):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ"""
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
    df = calculate_response_time(df)
    
    if section == 'response_time':
        show_response_time_analysis(df)
    else:
        show_full_analysis(df)

def show_full_analysis(df):
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    col1, col2 = st.columns(2)
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        success_count = len(df[df['satisfaction'] == 1])
        errors_count = len(df[df['satisfaction'] == 0])
        fig_success = px.pie(
            names=['–£—Å–ø–µ—à–Ω—ã–µ', '–û—à–∏–±–∫–∏'],
            values=[success_count, errors_count],
            title='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
            color_discrete_sequence=[COLORS['success'], COLORS['incorrect_answer']]
        )
        fig_success.update_traces(
            textposition='inside',
            textinfo='percent+label',
            hovertemplate="<br>".join([
                "%{label}",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %{value}",
                "–ü—Ä–æ—Ü–µ–Ω—Ç: %{percent}"
            ])
        )
        st.plotly_chart(fig_success, use_container_width=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_counts = df.groupby('category', as_index=False).agg({
            'satisfaction': ['count', lambda x: (x == 1).mean() * 100]
        })
        category_counts.columns = ['category', 'count', 'success_rate']
        
        fig_categories = px.bar(
            category_counts,
            x='category',
            y='count',
            color='success_rate',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
            labels={
                'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
                'success_rate': '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)'
            },
            color_continuous_scale=['red', 'yellow', 'green']
        )
        st.plotly_chart(fig_categories, use_container_width=True)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É—á–µ–±–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    study_df = df[df['category'] == '–£—á–µ–±–∞']
    if not study_df.empty:
        st.write("### –ê–Ω–∞–ª–∏–∑ —É—á–µ–±–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        subcategory_stats = study_df.groupby('subcategory', as_index=False).agg({
            'satisfaction': ['count', lambda x: (x == 1).mean() * 100]
        })
        subcategory_stats.columns = ['subcategory', 'count', 'success_rate']
        
        fig_subcategories = px.bar(
            subcategory_stats,
            x='subcategory',
            y='count',
            color='success_rate',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–µ–±–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
            labels={
                'subcategory': '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
                'success_rate': '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)'
            },
            color_continuous_scale=['red', 'yellow', 'green']
        )
        fig_subcategories.update_layout(
            xaxis_tickangle=-45,
            height=600
        )
        st.plotly_chart(fig_subcategories, use_container_width=True)
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    st.write("### –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã")
    if len(df) > 0:
        recent_requests = df.sort_values('timestamp', ascending=False).head(10)
        recent_requests['status'] = recent_requests['satisfaction'].map({1: '‚úÖ –£—Å–ø–µ—à–Ω–æ', 0: '‚ùå –û—à–∏–±–∫–∞'})
        st.dataframe(
            recent_requests[['timestamp', 'category', 'subcategory', 'query', 'status']].reset_index(drop=True),
            hide_index=True
        )
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def show_response_time_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
    st.write("### ‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
    
    if len(df) > 0:
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —á–∞—Å–∞–º
        df['hour'] = df['timestamp'].dt.hour
        hourly_stats = df.groupby('hour', as_index=False).agg({
            'response_time': ['mean', 'count']
        })
        hourly_stats.columns = ['hour', 'avg_response_time', 'count']
        
        fig_time = go.Figure()
        fig_time.add_trace(go.Bar(
            x=hourly_stats['hour'],
            y=hourly_stats['count'],
            name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
            marker_color='lightblue'
        ))
        fig_time.add_trace(go.Scatter(
            x=hourly_stats['hour'],
            y=hourly_stats['avg_response_time'],
            name='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)',
            yaxis='y2',
            line=dict(color='orange', width=2)
        ))
        
        fig_time.update_layout(
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —á–∞—Å–∞–º',
            xaxis_title='–ß–∞—Å',
            yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
            yaxis2=dict(
                title='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)',
                overlaying='y',
                side='right'
            ),
            hovermode='x unified'
        )
        st.plotly_chart(fig_time, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        col1, col2 = st.columns(2)
        with col1:
            response_stats = df['response_time'].describe()
            st.write("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
            st.write(f"–°—Ä–µ–¥–Ω–µ–µ: {response_stats['mean']:.2f} —Å–µ–∫")
            st.write(f"–ú–µ–¥–∏–∞–Ω–∞: {response_stats['50%']:.2f} —Å–µ–∫")
            st.write(f"–ú–∏–Ω–∏–º—É–º: {response_stats['min']:.2f} —Å–µ–∫")
            st.write(f"–ú–∞–∫—Å–∏–º—É–º: {response_stats['max']:.2f} —Å–µ–∫")
        
        with col2:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_time = df.groupby('category')['response_time'].mean().sort_values(ascending=False)
            st.write("### üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            for cat, time in category_time.items():
                st.write(f"{cat}: {time:.2f} —Å–µ–∫")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
