import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from src.utils import COLORS
from datetime import datetime, timedelta

def calculate_response_time(df):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏"""
    def time_diff(row):
        q_time = row['question_time']
        a_time = row['answer_time']
        
        base_date = datetime.now().date()
        q_datetime = datetime.combine(base_date, q_time)
        a_datetime = datetime.combine(base_date, a_time)
        
        if a_datetime < q_datetime:
            a_datetime = a_datetime + timedelta(days=1)
            
        return (a_datetime - q_datetime).total_seconds()
    
    df['response_time'] = df.apply(time_diff, axis=1)
    return df

def show_standard_view(df, section='all'):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ"""
    # –°–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
    df = calculate_response_time(df)
    
    if section == 'response_time':
        show_response_time_analysis(df)
    else:
        show_full_analysis(df)

def show_full_analysis(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    col_back, _ = st.columns([1, 4])
    with col_back:
        if st.button("‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é"):
            st.session_state.page = 'main'
            st.rerun()
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–∞–º–ø—É—Å–∞–º
        campus_stats = df.groupby('campus').size().reset_index(name='count')
        total_count = campus_stats['count'].sum()
        # –ò–∑–º–µ–Ω—è–µ–º —Å–ø–æ—Å–æ–± —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã —Å—É–º–º–∞ –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ —Ä–æ–≤–Ω–æ 100%
        percentages = []
        running_total = 0
        for i, count in enumerate(campus_stats['count']):
            if i == len(campus_stats) - 1:
                # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–µ—Ä–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ 100%
                percentage = 100 - running_total
            else:
                percentage = (count / total_count * 100).round(1)
                running_total += percentage
            percentages.append(percentage)
        
        campus_stats['percentage'] = percentages
        
        fig_campus = px.pie(
            campus_stats,
            values='count',
            names='campus',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º',
            color_discrete_sequence=px.colors.qualitative.Set3,
            hover_data=['percentage']
        )
        
        st.plotly_chart(fig_campus, use_container_width=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        error_df = df[df['satisfaction'] == 0]
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if not error_df.empty and df['category'].nunique() > 1:
            category_errors = error_df.groupby('category').size().reset_index(name='count')
            category_errors['percentage'] = (category_errors['count'] / len(error_df) * 100).round(1)
            
            fig_category_errors = px.pie(
                category_errors,
                values='count',
                names='category',
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                color_discrete_sequence=px.colors.qualitative.Set3,
                hover_data=['percentage']
            )
            fig_category_errors.update_traces(
                textposition='inside',
                textinfo='percent'
            )
            st.plotly_chart(fig_category_errors, use_container_width=True)
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    st.write("### –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã")
    if len(df) > 0:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        satisfaction_filter = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
            ['–í—Å–µ', '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ', '–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ']
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏ –∏—Ö —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        columns_to_show = {
            'date': '–î–∞—Ç–∞',
            'question_time': '–í—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–∞',
            'answer_time': '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞',
            'name': '–ò–º—è',
            'campus': '–ö–∞–º–ø—É—Å',
            'education_level': '–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
            'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            'subcategory': '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'query': '–ó–∞–ø—Ä–æ—Å',
            'response': '–û—Ç–≤–µ—Ç',
            'satisfaction': '–°—Ç–∞—Ç—É—Å'
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        if satisfaction_filter == '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ':
            filtered_df = df[df['satisfaction'] == 1]
        elif satisfaction_filter == '–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ':
            filtered_df = df[df['satisfaction'] == 0]
        else:
            filtered_df = df
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        recent_requests = filtered_df.sort_values(['date', 'question_time'], ascending=[False, False]).head(10)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏ –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ —Å—Ç–∞—Ç—É—Å–∞
        display_df = (recent_requests[columns_to_show.keys()]
                     .rename(columns=columns_to_show)
                     .copy())
        
        display_df['–°—Ç–∞—Ç—É—Å'] = display_df['–°—Ç–∞—Ç—É—Å'].map({
            1: '‚úÖ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ',
            0: '‚ùå –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'
        })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            display_df.reset_index(drop=True),
            hide_index=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
            data=display_df.to_csv(index=False).encode('utf-8-sig'),
            file_name="chatbot_analysis.csv",
            mime="text/csv",
            key='download-csv'
        )
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def show_response_time_analysis(df):
    """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
    col_back, col_title = st.columns([1, 4])
    with col_back:
        if st.button("‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é"):
            st.session_state.page = 'main'
            st.rerun()
    with col_title:
        st.title("‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")

    if len(df) > 0:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        time_period = st.selectbox(
            "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ",
            ["–ß–∞—Å–∞–º", "–î–Ω—è–º", "–ù–µ–¥–µ–ª—è–º", "–ú–µ—Å—è—Ü–∞–º"],
            key="time_period_selector"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        if time_period == "–ß–∞—Å–∞–º":
            df['period'] = df['timestamp'].dt.hour
            period_name = '—á–∞—Å–∞–º'
        elif time_period == "–î–Ω—è–º":
            df['period'] = df['timestamp'].dt.date
            period_name = '–¥–Ω—è–º'
        elif time_period == "–ù–µ–¥–µ–ª—è–º":
            df['period'] = df['timestamp'].dt.isocalendar().week
            period_name = '–Ω–µ–¥–µ–ª—è–º'
        else:  # –ú–µ—Å—è—Ü—ã
            # Convert Period to string for months
            df['period'] = df['timestamp'].dt.strftime('%Y-%m')
            period_name = '–ú–µ—Å—è—Ü–∞–º'
        
        # Group and aggregate data
        period_stats = df.groupby('period', as_index=False).agg({
            'response_time': ['mean', 'count']
        })
        period_stats.columns = ['period', 'avg_response_time', 'count']
        
        # Sort values
        period_stats = period_stats.sort_values('period')
        
        # Create figure
        fig_time = go.Figure()
        
        # Add traces
        fig_time.add_trace(go.Bar(
            x=period_stats['period'].astype(str),  # Convert to string
            y=period_stats['count'],
            name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
            marker_color='lightblue'
        ))
        
        fig_time.add_trace(go.Scatter(
            x=period_stats['period'].astype(str),  # Convert to string
            y=period_stats['avg_response_time'],
            name='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)',
            yaxis='y2',
            line=dict(color='orange', width=2)
        ))
        
        # Update layout
        fig_time.update_layout(
            title=f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ {period_name}',
            xaxis_title=period_name.capitalize(),
            yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
            yaxis2=dict(
                title='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)',
                overlaying='y',
                side='right'
            ),
            hovermode='x unified'
        )
        
        # Rotate labels if needed
        if time_period != "–ß–∞—Å—ã":
            fig_time.update_xaxes(tickangle=45)
        
        st.plotly_chart(fig_time, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        col1, col2 = st.columns(2)
        with col1:
            response_stats = df['response_time'].describe()
            st.write("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
            stats_data = {
                '–ú–µ—Ç—Ä–∏–∫–∞': ['–°—Ä–µ–¥–Ω–µ–µ', '–ú–µ–¥–∏–∞–Ω–∞', '–ú–∏–Ω–∏–º—É–º', '–ú–∞–∫—Å–∏–º—É–º'],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                    response_stats['mean'],
                    response_stats['50%'],
                    response_stats['min'],
                    response_stats['max']
                ]
            }
            
            fig_stats = px.bar(
                stats_data,
                x='–ú–µ—Ç—Ä–∏–∫–∞',
                y='–ó–Ω–∞—á–µ–Ω–∏–µ',
                title='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)',
                color_discrete_sequence=[COLORS['success']]
            )
            fig_stats.update_traces(
                text=fig_stats.data[0].y.round(2),
                textposition='outside'
            )
            st.plotly_chart(fig_stats, use_container_width=True)
        
        with col2:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            if df['category'].nunique() > 1:  # –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                category_time = df.groupby('category')['response_time'].mean().sort_values(ascending=True)
                st.write("### üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                
                fig_category_time = px.bar(
                    x=category_time.values,
                    y=category_time.index,
                    orientation='h',
                    title='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                    labels={'x': '–í—Ä–µ–º—è (—Å–µ–∫)', 'y': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'},
                    color_discrete_sequence=[COLORS['success']]
                )
                fig_category_time.update_traces(
                    text=category_time.values.round(2),
                    textposition='outside'
                )
                st.plotly_chart(fig_category_time, use_container_width=True)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
