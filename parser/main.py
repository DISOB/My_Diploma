from pathlib import Path
import pandas as pd
import psycopg2
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s")

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel
excel_file = Path("/app/data/chatbot_metrics.xlsx")

DB_CONFIG = {
    "dbname": "chatbot_db",
    "user": "myuser",
    "password": "1212",
    "host": "db"  # –¥–ª—è Docker!
}


def import_excel_to_metrics():
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
        if not excel_file.exists():
            logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_file}")
            return

        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel
        logging.info(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {excel_file}...")
        df = pd.read_excel(excel_file)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = [
            'date', 'dau', 'wau', 'mau', 'total_sessions',
            'avg_session_duration_sec', 'avg_messages_per_session',
            'success_rate', 'unknown_answer_rate', 'escalation_rate',
            'avg_response_time_ms', 'uptime_percent',
            'unique_students_dau', 'unique_students_wau', 'unique_students_mau',
            'exam_period_requests', 'top_topic_1', 'top_topic_2', 'top_topic_3',
            'csat_score', 'negative_feedback_rate', 'questions_handled'
        ]

        missing_cols = [col for col in required_columns if col not in df.columns]
        if missing_cols:
            logging.error(f"‚ùå –í Excel –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}")
            return

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        logging.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()

        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        cursor.execute("DELETE FROM chatbot_metrics;")
        logging.info("üßπ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")

        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        inserted = 0
        for _, row in df.iterrows():
            cursor.execute(
                """
                INSERT INTO chatbot_metrics (
                    date, dau, wau, mau, total_sessions,
                    avg_session_duration_sec, avg_messages_per_session,
                    success_rate, unknown_answer_rate, escalation_rate,
                    avg_response_time_ms, uptime_percent,
                    unique_students_dau, unique_students_wau, unique_students_mau,
                    exam_period_requests, top_topic_1, top_topic_2, top_topic_3,
                    csat_score, negative_feedback_rate, questions_handled
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                """,
                tuple(row)
            )
            inserted += 1

        conn.commit()
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {inserted} —Å—Ç—Ä–æ–∫.")

    except Exception as e:
        logging.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        conn.rollback()
    finally:
        if 'conn' in locals() and conn.closed == 0:
            cursor.close()
            conn.close()
            logging.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    import_excel_to_metrics()